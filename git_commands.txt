git diff // to see the differences between versions of a file based on commits

tip: each commit should equal one logical change
	example: two bugs in two different functions should get two commits one for each

git log ---  // shows you the hitsory of the changes starting with most recent  on the project and shows your the ID of who did what

git diff <ID> <ID> // lets you see the exact differences between the versions
specified by ID

git checkout <ID>  // allows you to use a pervoius version of a file 


git init // initializes the directory to be monitored by git

git commit // opens your default text editor comments should be a command

git checkout master // resturn back to the most recent code version

tip: after making a change to a file use git add to add it to the staging area 
    when your ready to commit to the change type git commit and add a comment
    about your change

git branch // theis command alone allows your to see what branches are
       available
git branch name  // creates a new branch called name so you can male changes 
     without affectin the master branch 
tip: after creating a branch use git checkout <branch name> to switch to it

git add  // add change to to staging area before being commited

git merge <branch> <branch>  // merges the branches

tip: when merging branches the branch your on is always included


